generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Defining Database Models

// User Model

model User {
  id                Int     @id @default(autoincrement())
  name              String
  email             String  @unique
  password          String
  role              String    @default("customer")
  carts             Cart[]
  cartItems         CartItem[]
  orders            Order[]
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


// Product Model
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  stock       Int
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  sizes       Size[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Order Model  
model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user      User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  total      Float
  status     String      @default("pending")
  payment    Payment?
  shipping   Shipping?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Cart Model
model Cart {
  id         Int         @id @default(autoincrement())
  userId     Int
  user      User        @relation(fields: [userId], references: [id])
  items      CartItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Payment Model
model Payment {
  id            Int       @id @default(autoincrement())
  orderId       Int       @unique
  order         Order     @relation(fields: [orderId], references: [id])
  amount        Float
  currency      String
  status        String    @default("pending")
  paymentMethod String
  transactionId String?
  refundReason  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([orderId])
}

// Shipping Model
model Shipping {
  id              Int       @id @default(autoincrement())
  orderId         Int       @unique
  order           Order     @relation(fields: [orderId], references: [id])
  address         String
  city            String
  postalCode      String
  phone           String
  status          String    @default("pending")
  trackingNumber  String?
  estimatedDelivery DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orderId])
}

// CartItem Model
model CartItem {
  id         Int      @id @default(autoincrement())
  userId     Int
  user      User     @relation(fields: [userId], references: [id])
  cartId     Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// OdereItem Model
model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String?
  parentId      Int?
  parent        Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  subCategories Category[] @relation("CategoryToCategory")
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Size {
  id        Int       @id @default(autoincrement())
  size      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
